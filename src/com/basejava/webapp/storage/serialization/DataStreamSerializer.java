package com.basejava.webapp.storage.serialization;import com.basejava.webapp.model.*;import java.io.*;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;import java.util.Map;public class DataStreamSerializer implements SerializationStrategy {    @Override    public Resume doRead(InputStream is) throws IOException {        try (DataInputStream dis = new DataInputStream(is)) {            String uuid = dis.readUTF();            String fullName = dis.readUTF();            Resume resume = new Resume(uuid, fullName);            for (int i = 0; i < dis.readInt(); i++) {                resume.addContact(ContactType.valueOf(dis.readUTF()), dis.readUTF());            }            SectionType sectionType = SectionType.valueOf(dis.readUTF());            resume.addSection(sectionType, switch (sectionType) {                case PERSONAL, OBJECTIVE:                    yield new TextSection(dis.readUTF());                case ACHIEVEMENTS, QUALIFICATIONS:                    List<String> strings = new ArrayList<>();                    for (int i = 0; i < dis.readInt(); i++) {                        strings.add(dis.readUTF());                    }                    yield new ListSection(strings);                case EDUCATION, EXPERIENCE:                    List<Organization.Position> position = new ArrayList<>();                    Link link = new Link();                    for (int i = 0; i < dis.readInt(); i++) {                        position.add(new Organization.Position(readLocalDate(dis), readLocalDate(dis), dis.readUTF(), dis.readUTF()));                        link = new Link(dis.readUTF(), dis.readUTF());                    }                    Organization organization = new Organization(position, link);                    yield new OrganizationSection(organization);            });            return resume;        }    }    @Override    public void doWrite(Resume resume, OutputStream os) throws IOException {        try (DataOutputStream dos = new DataOutputStream(os)) {            dos.writeUTF(resume.getUuid());            dos.writeUTF(resume.getFullName());            Map<ContactType, String> contacts = resume.getContacts();            dos.writeInt(contacts.size());            for (Map.Entry<ContactType, String> entry : contacts.entrySet()) {                dos.writeUTF(entry.getKey().name());                dos.writeUTF(entry.getValue());            }            //section initialization            Map<SectionType, AbstractSection> sections = resume.getSections();            for (Map.Entry<SectionType, AbstractSection> entry : sections.entrySet()) {                SectionType sectionType = entry.getKey();                AbstractSection section = entry.getValue();                dos.writeUTF(sectionType.name());                //TextSection initialization                switch (sectionType) {                    case PERSONAL, OBJECTIVE -> dos.writeUTF(((TextSection) section).getInfo());                    //ListSection initialization                    case ACHIEVEMENTS, QUALIFICATIONS -> {                        List<String> listEls = (((ListSection) section).getElements());                        dos.writeInt(listEls.size());                        for (String element : listEls) {                            dos.writeUTF(element);                        }                    }                    //OrganizationSection initialization                    case EDUCATION, EXPERIENCE -> {                        List<Organization> orgList = ((OrganizationSection) section).getOrganizations();                        dos.writeInt(orgList.size());                        for (Organization org : orgList) {                            for (Organization.Position position : org.getPositions()) {                                writeLocalDate(dos, position.getStartDate());                                writeLocalDate(dos, position.getEndDate());                                dos.writeUTF(position.getTitle());                                dos.writeUTF(position.getDescription());                            }                            Link link = new Link((org.getHomePage().getName()), org.getHomePage().getUrl());                            dos.writeUTF(String.valueOf(link));                        }                    }                }            }        }    }    private LocalDate readLocalDate(DataInputStream dis) throws IOException {        return LocalDate.of(dis.readInt(), dis.readInt(), 1);    }    public void writeLocalDate(DataOutputStream dos, LocalDate localDate) throws IOException {        dos.writeInt(localDate.getYear());        dos.writeInt(localDate.getMonthValue());    }}